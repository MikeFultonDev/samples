#!/bin/env bash

# Simple front end to compile PL/I code
# Requires 'bash' for extended 'type' command

entrydir="${PWD}"
#echo "${PWD}: Input: $@" >>/tmp/out

mydir=$(cd $(dirname $0) && echo $PWD)

allpli=$(type -ap pli)
realpli=$(echo "${allpli}" | tail -1)

if [ "${realpli}x" = "x" ]; then
  echo "Unable to find the underlying PL/I compiler 'pli'" >&2
  exit 16
fi

if [ "${realpli}" = "${mydir}/pli" ]; then
  echo "Need to ensure the underlying PL/I compiler 'pli' is in your PATH" >&2
  exit 16
fi

# msf - rudimentary to get going
pliopts="-qrent"
version=false
objparm=false
componly=false
depfile=false
deptgt=false
outobj=''
insrc=''
inobjs=''
depfilename=''
deptgtname=''

# Description of -M -MD -MT -MF compiler options: https://programmer.group/gcc-m-mm-mmd-mf-mt.html
# Sample options for dependency generation:
#  pli -MD -MT deptgt.o -MF dep.d -o tgt.o -c src.pli
#   where: deptgt.o is the target to write out to the dependency file
#          dep.d is the dependency file to write to

# Switch to 'getopt' once available

for opt in $@; do
  opttext="${opt#-*}";
  if [ "${opttext}" = "${opt}" ]; then
    if ${objparm}; then
      outobj="${opttext}"
      objparm=false
    else
      if ${deptgt}; then
        deptgtname="${opttext}"
        deptgt=false
      else
        if ${depfile}; then
          depfilename="${opttext}"
          depfile=false
        else
          # this is an input source or object file
          ext=${opt##*.}
          if [ "${ext}x" = "ox" ]; then
            if [ "${inobjs}x" = "x" ]; then
              inobjs="${opt}"
            else 
              inobjs="${inobjs} ${opt}"
            fi
          else
            if [ "${insrc}x" = "x" ]; then
              insrc="${opt}"
            else 
              insrc="${insrc} ${opt}"
            fi
          fi
        fi
      fi
    fi
  else
    objparm=false
    depfile=false
    deptgt=false
    case "${opttext}" in
    MD)
      pliopts="${pliopts} -c -qxinfo=dep"
      ;;
    MT)
      deptgt=true
      ;;
    MF)
      depfile=true
      ;;
    v|-version)
      version=true
      ;;
    o)
      objparm=true
      ;;
    c)
      componly=true
      pliopts="${pliopts} -${opttext}"
      ;;
    *)
      pliopts="${pliopts} -${opttext}"
      ;;
    esac
  fi
done

if ${version} ; then
  (cd /tmp; echo " PLIVER: PROC OPTIONS(MAIN);" >$$.pli;  pli -qlist -qnc -c $$.pli >/dev/null 2>/dev/null ; cat $$.lst | head -1; rm $$.lst $$.pli)
fi
  
if [ "${insrc}x" = "x" ] && [ "${inobjs}x" = "x" ]; then
  if ${version}; then
    exit 0
  else
    echo "Unable to determine source file from command line $@" >&2
    exit 8
  fi
fi

#
# unfortunate restriction: to add 'support' for -c -o <object> we first write it to the local 
# directory and then move it to the right target location
# this doesn't work in general because the local directory may be read-only (among other issues)
#
# This code does not handle anything fancy like -c -o <object-directory> if there are multiple
# .o's being generated

fromobj=''
toobj=''
if [ "${outobj}x" != "x" ]; then
  if ${componly} ; then
    firstinsrc=${insrc%% *}
    if [ "${firstinsrc}" != "${insrc}" ]; then
      echo "No support for multiple source files being compiled with -c and -o option" >&2
      exit 8
    fi
    insrcwithoutextension=${insrc%.*}
    insrcbase=$(basename "${insrcwithoutextension}")
    if [ "${depfilename}x" != "x" ]; then
      cmpdepfilename="${insrcbase}.d"  
    fi
    fromobj="${entrydir}/${insrcbase}.o"
    sansleadingslash=${outobj#/*}
    if [ "${sansleadingslash}" = "${outobj}" ]; then 
      # No leading slash
      toobj="${entrydir}/${outobj}"
    else
      toobj="${outobj}"
    fi
  else
    pliopts="${pliopts} -o ${outobj}"
  fi
fi

inobjsmod=''
mod=false
if [ "${inobjs}x" != "x" ]; then
  # work around limitation in PL/I linker - does not like file with multiple dots
  for inobj in ${inobjs}; do
    objpath=$(dirname "${inobj}")
    objbase=$(basename "${inobj}")
    objbasesansext=${objbase%.*}
    objbasetrdu=$(echo "${objbasesansext}" | tr '.' '_')
    if [ "${objbasetrdu}x" != "${objbasesansext}x" ]; then
      # object files are of form a.b.o - move it to a_b.o, do the link, move back
      mod=true
      newinobj="${objpath}/${objbasetrdu}.o"
      if ! mv "${inobj}" "${newinobj}" ; then
        echo "Problem trying to move ${inobj} to ${newinobj}" >&2
        exit 8
      fi
      inobjmod="${newinobj}"
    else
      inobjmod="${inobj}"
    fi
    if [ "${inobjsmod}x" = "x" ]; then
      inobjsmod="${inobjmod}"
    else
      inobjsmod="${inobjsmod} ${inobjmod}"
    fi
  done
fi

#
# add in -I<dir> for each src directory that isn't ./
#
for s in "${insrc}"; do
  sdir=$(dirname "${s}")
  if [ "${sdir}" != "." ]; then
    pliopts="-I${sdir} ${pliopts}"
  fi
done

#
#
# debug start
#
#echo "${PWD}:" "${realpli}" ${pliopts} $insrc $inobjsmod >>/tmp/out
#if [ "${insrc}x" != "x" ]; then
#  baseinsrc=$(basename "${insrc}")
#  if [ "${insrc}" != "/tmp/${baseinsrc}" ]; then
#    cp "${insrc}" /tmp/"${baseinsrc}"
#  fi
#fi
#
# debug end
#

#
# Hack to suppress messages about no place to write SYSDEFSD definition side deck
#
"${realpli}" ${pliopts} ${insrc} ${inobjsmod} 2>/tmp/$$.pli.stderr >/tmp/$$.pli.stdout
rc=$?
if [ $rc -eq 4 ]; then
  rc=0
fi
cat /tmp/$$.pli.stderr | grep -v 'IEW2689W' | grep -v 'FSUM3065' >&2
cat /tmp/$$.pli.stdout
rm /tmp/$$.pli.*

#
# Move dependency file and prepend target 
#
if [ "${cmpdepfilename}x" != "x" ]; then
  echo -n "${deptgtname}: " >"${depfilename}"
  cat "${cmpdepfilename}" >>"${depfilename}"
  rm "${cmpdepfilename}"
fi

for inobj in ${inobjs}; do
  modobj=${inobjsmod%% *}
  inobjsmod=${inobjsmod#* }
  if [ "${modobj}" != "${inobj}" ]; then
    if ! mv "${modobj}" "${inobj}"; then
      echo "Problem trying to move back ${modobj} to ${inobj}" >&2
      exit 8
    fi
  fi
done

if [ $rc -lt 4 ]; then
  if [ -f "${fromobj}" ]; then
    if [ "${fromobj}" != "${toobj}" ]; then
      mv "${fromobj}" "${toobj}" 
    fi
    rc=$?
  fi
fi
exit $rc
