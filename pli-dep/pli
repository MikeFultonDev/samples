#!/bin/env bash

# Simple front end to compile PL/I code
# Requires 'bash' for extended 'type' command

#set -x
mydir=$(cd $(dirname $0) && echo $PWD)

allpli=$(type -ap pli)
realpli=$(echo "${allpli}" | tail -1)

if [ "${realpli}x" = "x" ]; then
  echo "Unable to find the underlying PL/I compiler 'pli'" >&2
  exit 16
fi

if [ "${realpli}" = "${mydir}/pli" ]; then
  echo "Need to ensure the underlying PL/I compiler 'pli' is in your PATH" >&2
  exit 16
fi

set -x
# msf - rudimentary to get going
pliopts="-qrent"
version=false
objparm=false
componly=false
outobj=''
insrc=''
inobjs=''
for opt in $@; do
  opttext="${opt#-*}";
  if [ "${opttext}" = "${opt}" ]; then
    if ${objparm}; then
      outobj="${opttext}"
      objparm=false
    else
      # this is an input source or object file
      ext=${opt##*.}
      if [ "${ext}x" = "ox" ]; then
        if [ "${inobjs}x" = "x" ]; then
          inobjs="${opt}"
        else 
          inobjs="${inobjs} ${opt}"
        fi
      else
        if [ "${insrc}x" = "x" ]; then
          insrc="${opt}"
        else 
          insrc="${insrc} ${opt}"
        fi
      fi
    fi
  else
    objparm=false
    if [ "${opttext}" = 'M' ]; then
      pliopts="${pliopts} -c -qxinfo=dep -qnc"
    else 
      if [ "${opttext}" = 'v' ]; then
        version=true
      else 
        if [ "${opttext}" = 'o' ]; then
          objparm=true
        else
          if [ "${opttext}" = 'c' ]; then
            componly=true
            pliopts="${pliopts} -${opttext}"
          else
            pliopts="${pliopts} -${opttext}"
          fi
        fi
      fi
    fi
  fi
done

export STEPLIB=FULTONM.PORT.TEMPFE:FULTONM.PORT.TEMPBE:$STEPLIB
if ${version} ; then
  (cd /tmp; echo " PLIVER: PROC OPTIONS(MAIN);" >$$.pli;  pli -qlist -qnc -c $$.pli >/dev/null 2>/dev/null ; cat $$.lst | head -1; rm $$.lst $$.pli)
fi
  
if [ "${insrc}x" = "x" ]; then
  if ! ${version}; then
    echo "Unable to determine source file from command line $@" >&2
    exit 8
  fi
fi


#
# unfortunate restriction: to add 'support' for -c -o <object> we first write it to the local 
# directory and then move it to the right target location
# this doesn't work in general because the local directory may be read-only (among other issues)
#
# This code does not handle anything fancy like -c -o <object-directory> if there are multiple
# .o's being generated

fromobj=''
toobj=''
if [ "${outobj}x" != "x" ]; then
  if ${componly} ; then
    firstinsrc=${insrc%% *}
    if [ "${firstinsrc}" != "${insrc}" ]; then
      echo "No support for multiple source files being compiled with -c and -o option" >&2
      exit 8
    fi
    insrcwithoutextension=${insrc%.*}
    fromobj="${insrcwithoutextension}.o"
    toobj="${outobj}"
  else
    pliopts="${pliopts} -o ${outobj}"
  fi
fi

set -x

inobjsmod=''
mod=false
if [ "${inobjs}x" != "x" ]; then
  # work around limitation in PL/I linker - does not like file with multiple dots
  for inobj in ${inobjs}; do
    objpath=$(dirname "${inobjs}")
    objbase=$(basename "${inobjs}")
    objbasesansext=${objbase%.*}
    objbasetrdu=$(echo "${objbasesansext}" | tr '.' '_')
    if [ "${objbasetrdu}x" != "${objbasesansext}x" ]; then
      # object files are of form a.b.o - move it to a_b.o, do the link, move back
      mod=true
      newinobj="${objpath}/${objbasetrdu}.o"
      if ! mv "${inobj}" "${newinobj}" ; then
        echo "Problem trying to move ${inobj} to ${newinobj}" >&2
        exit 8
      fi
      inobjmod="${newinobj}"
    else
      inobjmod="${inobj}"
    fi
    if [ "${inobjsmod}x" = "x" ]; then
      inobjsmod="${inobjmod}"
    else
      inobjsmod="${inobjsmod} ${inobjmod}"
    fi
  done
fi
       
#
# debug start
#
echo "${realpli}" ${pliopts} $insrc >>/tmp/out
if [ "${insrc}x" != "x" ]; then
  baseinsrc=$(basename "${insrc}")
  if [ "${insrc}" != "/tmp/${baseinsrc}" ]; then
    cp "${insrc}" /tmp/"${baseinsrc}"
  fi
fi
#
# debug end
#

"${realpli}" ${pliopts} ${insrc} ${inobjsmod}
rc=$?

for inobj in ${inobjs}; do
  modobj=${inobjsmod%% *}
  inobjsmod=${inobjsmod#* }
  if ! mv "${modobj}" "${inobj}"; then
    echo "Problem trying to move back ${modobj} to ${inobj}" >&2
    exit 8
  fi
done

if [ $rc -lt 4 ]; then
  if [ -f "${fromobj}" ]; then
    if [ "${fromobj}" != "${toobj}" ]; then
      mv "${fromobj}" "${toobj}" 
    fi
    rc=$?
  fi
fi
exit $rc
