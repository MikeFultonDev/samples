#!/bin/sh
#
# Test XSysvar argument processing
# 1) Check for error with no parms
# 2) Check for error with invalid option 
# 3) verify that -l can't be specified with a set
# 4) Check that dataset name too long generates error (more than 54)
# 5) Check that dataset name less than 54 but too long when suffix added generates error
# 6) Check that dataset name that does not exist generates error
# 7) verify that -V, -R, -M can't be specified if -P isn't specified
# 8) Check that set and delete together generate error
# 9) Check that delete and list together generate error

function XsysvarStderr {
	set +x
	xlines=$1
	shift 1
	xopts=$*

	xerr=`Xsysvar ${xopts} 2>&1 1>/dev/null`
	xrc=$?
	echo "${xerr}" | head -${xlines}
	return $xrc	
}

dhlq='ibmuser.argchk'
drm -f ${dhlq}

crtvsamxsysvar ${dhlq}
rc=$?
if [ $rc -gt 0 ]; then
	exit $rc
fi

rclist=""
#
# (1)
#
out=`XsysvarStderr 1`
rclist="${rclist} $?"
if [ "${out}" != "Key not specified" ]; then
	echo "Check for error with no parms failed" >&2
	exit 16
fi

#
# (2)
#
out=`XsysvarStderr 1 -N Key`
rclist="${rclist} $?"
if [ "${out}" != "Unknown option:-N" ]; then
	echo "Check for error with invalid option failed" >&2
	exit 16
fi

#
# 3
#
out=`XsysvarStderr 1 -D${dhlq} -l Key=Val`
rclist="${rclist} $?"
if [ "${out}" != "-l can not be specified when setting a variable" ]; then
	echo "Check for error with -l and Key=Val failed" >&2
	exit 16
fi

#
# (4)
#
toolongdsname='IBMUSER.M10123456.M20123456.M30123456.M40123456.M50123456'
out=`XsysvarStderr 1 -D${toolongdsname} Key`
rclist="${rclist} $?"
if [ "${out}" != "Prefix ${toolongdsname} is too long" ]; then
	echo "Check for error with VSAM Cluster prefix too long failed" >&2
	exit 16
fi

#
# (5)
#
prefixtoolongdsname='IBMUSER.M10123456.M20123456.M30123456'
out=`XsysvarStderr 1 -D${prefixtoolongdsname} Key`
rclist="${rclist} $?"
if [ "${out}" != "VSAM Cluster key/value dataset name invalid: ${prefixtoolongdsname}" ]; then
	echo "Check for error with VSAM Cluster dataset too long failed" >&2
	exit 16
fi

#
# (6)
#
prefixnotexist="$(hlq).NOTEXIST"
out=`XsysvarStderr 1 -D${prefixnotexist} Key`
rclist="${rclist} $?"
out=`echo "${out}" | head -1`
if [ "${out}" != "Unable to open VSAM dataset //'${prefixnotexist}.KEY.PATH' mode rb,type=record" ]; then
	echo "Check for error with non-existant VSAM Cluster too long failed" >&2
	exit 16
fi

#
# (7,8,9)
#
msg='-V, -R, and -M can only be specified if -P is specified'
filter='-VVersion -RRelease -MMod'
for f in ${filter}; do
	out=`XsysvarStderr 1 -D${dhlq} ${f} Key`
	rclist="${rclist} $?"
	if [ "${out}" != "${msg}" ]; then
		echo "Check for error with ${f} and no -P failed" >&2
		exit 16
	fi
done

msg='You can not set and delete a variable at the same time'
out=`XsysvarStderr 1 -d -D${dhlq} Key=Set`
if [ "${out}" != "${msg}" ]; then
	echo "Check for delete/set did not print right message. Got: ${out} and Expected: ${msg}" >&2
	exit 16
fi
msg='-l can not be specified when deleting a variable'
out=`XsysvarStderr 1 -l -d -D${dhlq} Key`
if [ "${out}" != "${msg}" ]; then
	echo "Check for delete/list did not print right message. Got: ${out} and Expected: ${msg}" >&2
	exit 16
fi

#
# Check that error codes are non-zero
#
test=1
for rc in ${rclist}; do
	if [ "${rc}" = "0" ]; then
		echo "Test ${test} did not generate a non-zero RC. RC:${rc}" >&2
		exit 16
	fi
	test=$((test+1))
done
