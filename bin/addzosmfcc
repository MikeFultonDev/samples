#!/bin/sh
#
# Generate z/OSMF Client Certificate for a specified user. This script requires the z/OSMF CA and z/OSMF Server certificate to already exist
#

verbose=false
force=false
clientLabel='z/OSMF Client Cert:'
clientRing='zOSMFClientRing'
caLabel='zOSMFCA'
clientName='zosmfcc'
clientUser=''
browserCertPW='zosmfClientCert'
browserCertDir='/tmp'
certPrefix='zosmf'

genOpts=''

Syntax() {
	echo "$0 [-vf] [-d <browser-cert-directory>] [-p <browser-cert-pw>] <user>" >&2
	echo "  where: " >&2
	echo "    -v : if specified, write information about the certificate chain to stderr" >&2
	echo "    -f : if specified, delete the certificate first" >&2
	echo "    <browser-cert-directory> is the directory to write the exported browser certificate to (defaults to /tmp)" >&2
	echo "    <browser-cert-pw> is the browser certificate password (defaults to ${browserCertPW})" >&2
	echo "    <user> is the user to create a certificate for" >&2
	echo "Example:" >&2
	echo "  Create a z/OSMF client certificate and create: " >&2  
	echo "    P12 format certificate $HOME/${certPrefix}-bin.p12, with a password of mypassword" >&2
	echo "    PEM certificate $HOME/${certPrefix}-crt.pem" >&2
	echo "    PEM private key $HOME/${certPrefix}-key.pem" >&2
	echo "  $0 -d $HOME -p mypassword" >&2
	exit 8
}

while getopts ":vfh?d:p:" opt; do
        case ${opt} in
		p ) 
			browserCertPW=${OPTARG}
			;;
		d ) 
			browserCertDir=${OPTARG}
			if ! [ -d "${browserCertDir}" ]; then
				echo "${browserCertDir} is not a valid directory." >&2
				Syntax
			fi
			;;
                v )
                        verbose=true
          		;;
                f )
                        force=true
			genOpts="-f"
          		;;
	        \?)
	                if [ ${OPTARG} != "?" ] && [ ${OPTARG} != "h" ]; then
	                        echo "Unknown Option: ${OPTARG}" >&2
	                fi
	                Syntax
	                exit 4
	                ;;
	esac
done
shift $(expr $OPTIND - 1 )
	
if [ $# -ne 1 ]; then
	Syntax
	exit 4
fi
clientUser="$1"
ringOwner="${clientUser}"

clientLabel="${clientLabel} ${clientUser}"
clientRing="${clientRing}${ringOwner}"

loc=`whence generalfuncs`
if [ $? -gt 0 ]; then
	echo "Ensure zospm/bin is in your PATH" >&2
	Syntax
fi
loc=`whence genzosmfcert`
if [ $? -gt 0 ]; then
	echo "Ensure samples/bin are in your PATH" >&2
	Syntax
fi

. generalfuncs
. racffuncs

tmpds=`mvstmp $(hlq)`
drm -f "${tmpds}"
dtouch -tseq "${tmpds}"
chk $? "Unable to allocate temporary certificate dataset ${tmpds}"

tsocmd "RACDCERT DELRING(${clientRing}) ID(${ringOwner})" >/dev/null 2>&1
issueTSO "RACDCERT ADDRING(${clientRing}) ID(${ringOwner})"
chk $? "Unable to create client ring: ${clientRing} for ${ringOwner}"

gencc "${genOpts}" "${clientName}" "${clientUser}" "${clientLabel}" "${caLabel}"
chk $? "Unable to create client certificate: ${clientLabel}"

issueTSO "RACDCERT CONNECT(ID(${clientUser}) LABEL('${clientLabel}') RING(${clientRing}) DEFAULT) ID(${ringOwner})"
chk $? "Unable to connect client certificate: ${clientLabel} to ring ${clientRing}"

issueTSO "RACDCERT CONNECT(CERTAUTH LABEL('${caLabel}') RING(${clientRing})) ID(${ringOwner})"
chk $? "Unable to connect CA label: ${caLabel} to ring ${clientRing}"

prefix="${browserCertDir}/${certPrefix}-${clientUser}"
p12binfile="${prefix}-bin.p12"
pemcert="${prefix}-crt.pem"
pemkey="${prefix}-key.pem"
sslout="${prefix}-ssl.out"
sslerr="${prefix}-ssl.err"

issueTSO "RACDCERT ID(${clientUser}) EXPORT(LABEL('${clientLabel}')) DSN('${tmpds}') FORMAT(PKCS12DER) PASSWORD('${browserCertPW}')"
chk $? "Unable to export RACF certificate as DER encoded client certificate"

dcp -B "${tmpds}" "${p12binfile}"
chk $? "Unable to copy client certificate ${tmpds}"

rm -f "${sslout}" "${sslerr}"

openssl pkcs12 -in "${p12binfile}" -out "${pemcert}" -clcerts -nokeys -passin "pass:${browserCertPW}" >${sslout} 2>${sslerr}
chk $? "Unable to create pem cert ${pemcert}. See ${sslout} and ${sslerr} for details" 

openssl pkcs12 -in "${p12binfile}" -out "${pemkey}" -nocerts -nodes -passin "pass:${browserCertPW}" >>${sslout} 2>>${sslerr}
chk $? "Unable to create pem cert ${pemkey}. See ${sslout} and ${sslerr} for details" 

rm -f "${sslout}" "${sslerr}"

drm -f "${tmpds}"

if ${verbose}; then
	certificateDetails=`tsocmd "racdcert id(${clientUser}) listchain(label('${clientLabel}'))"`
	chk $? "Unable to list certificate chain for label ${clientLabel} for owner ${clientUser}"
	echo "${certificateDetails}" >&2
fi

exit 0
