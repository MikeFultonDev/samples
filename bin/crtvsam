#!/bin/sh
# *********************************************************************
# * Copyright (c) 2021 IBM
# *
# * This program and the accompanying materials are made
# * available under the terms of the Eclipse Public License 2.0
# * which is available at https://www.eclipse.org/legal/epl-2.0/
# *
# * SPDX-License-Identifier: EPL-2.0
# **********************************************************************

function isnum {
	string=$1
	case $string in
	    ''|*[!0-9]*) return false ;;
	    *) return true ;;
	esac
}

function getkey {
	baseKey=${1%%U}
	if [ "${baseKey}" = "${1}" ]; then
		unique=false
	else
		unique=true
	fi
	keyName=${baseKey%%:*}
	keyVals=${baseKey#*:}
	keyOffset=${keyVals#*:}
	keyLength=${keyVals%%:*}

	if [ "${keyName}" = '' ] || [ "${keyName}" = "${baseKey}" ] || [ "${keyOffset}" = "${keyVals}" ] || [ "${keyLength}" = "${keyVals}" ]; then
		echo "Key name, key offset, and key length must be specified" >&2
	else 
		if isnum ${keyLength} ; then
			if isnum ${keyOffset} ; then
				keyName=$(echo "$keyName" | tr '[:lower:]' '[:upper:]');
				if $unique ; then
					echo ${keyName} ${keyLength} ${keyOffset} U
				else 
					echo ${keyName} ${keyLength} ${keyOffset}
				fi
				return 0
			else
				echo "Offset ${keyOffset} is not valid" >&2
			fi
		else
			if isnum ${keyOffset} ; then
				echo "Key length ${keyLength} is not valid" >&2
			else
				echo "Neither Key offset ${keyOffset} nor key length ${keyLength} is valid" >&2
			fi
		fi
	fi
	return 8
}
	
function crtVSAM {
	fixedRecord=$1
	repro=$2
	cluster=$3
	keyName=$4
	keyLen=$5
	keyOffset=$6
	type=$7

	if [ "${keyName}" != '' ]; then 
		type="INDEXED KEYS(${keyLen} ${keyOffset})"
		index="  INDEX (NAME(${cluster}.${keyName}.INDEX))"
	else 
		type='NONINDEXED'
		index=''
	fi
	if [ ! -f "${repro}" ]; then
		echo "Repro file: ${repro} does not exist" >&2
		return 8
	fi

	out=`vls ${cluster} 2>/dev/null`
	rc=$? 
	if [ $rc -eq 0 ]; then
		echo "VSAM Cluster ${cluster} already exists" >&2
		return 8
	fi

	out=`mvscmdauth --pgm=IDCAMS --sysin=stdin --sysprint=stdout` <<zz
  DEFINE CLUSTER ( -
    NAME(${cluster}) -
    MEGABYTES(1,10) -
    ${type} -
    RECSZ(${fixedRecord} 32761) -
  ) -
  DATA ( -
    NAME(${cluster}.DATA) -
  ) -
  ${index}
zz
	rc=$?
	if [ ${rc} -gt 0 ]; then
		echo "VSAM creation failed" >&2
		echo "${out}" >&2
		return $rc
	fi	

	out=`mvscmdauth --pgm=IDCAMS --sysin=stdin --sysprint=stdout --in="${repro}" --out="${cluster}"` <<zz
  REPRO INFILE(IN) OUTFILE(OUT)
zz
	rc=$?
	if [ ${rc} -gt 0 ]; then
		echo "VSAM REPRO failed" >&2
		echo "${out}" >&2
		return $rc
	fi	
	return 0
}

function crtAltIndex {
	cluster="$1"
	keyName=$2
	keyLen=$3
	keyOffset=$4
	type=$5

	out=`vls ${cluster} 2>/dev/null`
	rc=$? 
	if [ $rc -gt 0 ]; then
		echo "VSAM Cluster ${cluster} does not exist" >&2
		return 8
	fi

	if [ "{type}" = "U" ]; then
		keyType="UNIQUEKEY"
	else
		keyType="NONUNIQUEKEY"
	fi

        out=`mvscmdauth --pgm=IDCAMS --sysin=stdin --sysprint=stdout` <<zz
  DEFINE AIX ( -
    NAME(${cluster}.${keyName}) -
    RELATE(${cluster}) -
    KILOBYTES(10,100) -
    KEYS(${keyLen} ${keyOffset}) -
    ${keyType} -
    UPGRADE -
  ) -
  DATA ( -
    NAME(${cluster}.${keyName}.DATA) -
  ) -
  INDEX ( -
    NAME(${cluster}.${keyName}.INDEX) -
  ) 
zz
	rc=$?
	if [ ${rc} -gt 0 ]; then
		echo "VSAM AIX creation failed" >&2
		echo "${out}" >&2
		return $rc
	fi

	out=`mvscmdauth --pgm=IDCAMS --sysin=stdin --sysprint=stdout` <<zz
  DEFINE PATH ( -
    NAME(${cluster}.${keyName}.PATH) -
    PATHENTRY(${cluster}.${keyName}) -
    UPDATE -
  )
zz
	rc=$?
	if [ ${rc} -gt 0 ]; then
		echo "VSAM PATH creation failed" >&2
		echo "${out}" >&2
		return $rc
	fi

	out=`mvscmdauth --pgm=IDCAMS --sysin=stdin --sysprint=stdout` <<zz
  BLDINDEX  -
    INDATASET(${cluster}) -
    OUTDATASET(${cluster}.${keyName})
zz
	rc=$?
	if [ ${rc} -gt 0 ]; then
		echo "VSAM BLDINDEX creation failed" >&2
		echo "${out}" >&2
		return $rc
	fi

	return 0
}

function adjustFixedRecord {
	fixedRecord=$1
	keyName=$2
	keyLen=$3
	keyOffset=$4
	type=$5


	end=$((keyOffset+keyLen))
	if [ ${end} -gt ${fixedRecord} ]; then
		fixedRecord=$end
	fi
	return $fixedRecord
}
	
#
# Mainline
#

if [ $# -lt 2 ]; then
	echo "Syntax: $0 <cluster> <repro> [<key>]*" >&2
	echo "Where: " >&2
	echo "<cluster> is the name of the VSAM cluster to create" >&2
	echo "<repro> is the name of the file to perform the initial load from" >&2
	echo "<key> is of the form: <name>:<length>:<offset>[U]" >&2
	echo "  <name>: the name of the key" >&2
	echo "  <length>: the length of the key" >&2
	echo "  <offset>: the offset of the key" >&2
	echo "  U: indicates that the key is unique" >&2
	echo "Note:" >&2
	echo "  If the first key specified is unique, a KSDS will be created, otherwise an ESDS will be created" >&2
	exit 4
fi

cluster=$(echo "$1" | tr '[:lower:]' '[:upper:]');
repro="$2"

#
# Either provide an option or try to do a 'smart' average calculation
#
shift 2
allkeys=$*
shift 1
altkeys=$*

#
# Check the keys and find the end of the 'fixed record'
# Also determine if the first key is UNIQUE, in which case create a KSDS with that key
#
fixedRecord=0
first=true
for key in ${allkeys}; do
	keyInfo=`getkey ${key}`
	if [ $? -gt 0 ]; then
		return 8
	fi
	if ${first} ; then
		w=`echo ${keyInfo} | wc -w` 
		if [ $w -eq 4 ]; then
			primaryKeyInfo="${keyInfo}"
		else
			primaryKeyInfo=''
			altkeys=${allkeys}
		fi
	fi
		
	adjustFixedRecord ${fixedRecord} ${keyInfo}
	fixedRecord=$?
done

crtVSAM ${fixedRecord} ${repro} ${cluster} ${primaryKeyInfo}
rc=$?
if [ $rc -gt 0 ]; then
	exit $rc
fi

for altkey in $altkeys; do
	key=`getkey ${altkey}`
	crtAltIndex "${cluster}" ${key}
	rc=$?
	if [ $rc -gt 0 ]; then
		exit $rc
	fi
done	
