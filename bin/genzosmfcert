#!/bin/sh
#
# Generate z/OSMF Certificate Authority, Server Certificate, Client Certificate, put them in rings, and export them for use in browser and client tools
#

verbose=false
clientLabel='z/OSMF Client Certificate'
serverLabel='DefaultzOSMFCert.IZUDFLT'
caLabel='zOSMFCA'
clientName='zosmfcc'
caName='z/OSMF CertAuth for Security Domain'
clientUser=$(hlq)
clientRing='ZOSMF'
browserCertPW='zosmfClientCert'
browserCertDir='/tmp'
certPrefix='zosmf'
zosmfRing='IZUKeyring.IZUDFLT'
serverUser='IZUSVR'
zosmfOU='IZUDFLT'

Syntax() {
	echo "$0 [-v] [-d <browser-cert-directory>] [-p <browser-cert-pw>]" >&2
	echo "  where: " >&2
	echo "    -v : if specified, write information about the certificate chain to stderr" >&2
	echo "    <browser-cert-direcotyr> is the directory to write the exported browser certificate to (defaults to /tmp)" >&2
	echo "    <browser-cert-pw> is the browser certificate password (defaults to ${browserCertPW})" >&2
	echo "Example:" >&2
	echo "  Create a z/OSMF certificate and create: " >&2  
	echo "    P12 format certificate $HOME/${certPrefix}-bin.p12, with a password of mypassword" >&2
	echo "    PEM certificate $HOME/${certPrefix}-crt.pem" >&2
	echo "    PEM private key $HOME/${certPrefix}-key.pem" >&2
	echo "  $0 -d $HOME -p mypassword" >&2
	exit 8
}

while getopts ":vh?d:p:" opt; do
        case ${opt} in
		p ) 
			browserCertPW=${OPTARG}
			;;
		d ) 
			browserCertDir=${OPTARG}
			if [ -d "${browserCertDir}" ]; then
				echo "${browserCertDir} is not a valid directory." >&2
				Syntax
			fi
			;;
                v )
                        verbose=true
          		;;
	        \?)
	                if [ ${OPTARG} != "?" ] && [ ${OPTARG} != "h" ]; then
	                        echo "Unknown Option: ${OPTARG}" >&2
	                fi
	                Syntax
	                exit 4
	                ;;
	esac
done
shift $(expr $OPTIND - 1 )
	
if [ $# -gt 0 ]; then
	Syntax
	exit 4
fi

loc=`whence generalfuncs`
if [ $? -gt 0 ]; then
	echo "Ensure zospm/bin is in your PATH" >&2
	Syntax
fi
loc=`whence genzosmfcert`
if [ $? -gt 0 ]; then
	echo "Ensure samples/bin are in your PATH" >&2
	Syntax
fi

. generalfuncs
. racffuncs

tmpds=`mvstmp $(hlq)`
drm -f "${tmpds}"
dtouch -tseq "${tmpds}"
chk $? "Unable to allocate temporary certificate dataset ${tmpds}"

tsocmd "racdcert id(${serverUser}) delring(${zosmfRing})" >/dev/null 2>&1
issueTSO "racdcert id(${serverUser}) addring(${zosmfRing})"

tsocmd "racdcert id(${clientUser}) delring(${clientRing})" >/dev/null 2>&1
issueTSO "racdcert id(${clientUser}) addring(${clientRing})"

genca -f "-U${zosmfOU}" "${caName}" "${caLabel}"
chk $? "Unable to re-create certificate authority: ${caLabel}"

gensc -f "-U${zosmfOU}" -OIBM "${serverUser}" "${serverLabel}" "${caLabel}"
chk $? "Unable to re-create server certificate: ${serverLabel}"

gencc -f "${clientName}" "${clientUser}" "${clientLabel}" "${caLabel}"
chk $? "Unable to re-create client certificate: ${clientLabel}"

issueTSO "RACDCERT ID(${serverUser}) CONNECT(CERTAUTH LABEL('${caLabel}') RING(${zosmfRing}))"
chk $? "Unable to connect ${certlabel} and ${zosmfRing}"

issueTSO "RACDCERT ID(${serverUser}) CONNECT(ID(${serverUser}) LABEL('${serverLabel}') RING(${zosmfRing}) DEFAULT)"
chk $? "Unable to connect ${certlabel} and ${zosmfRing}"

issueTSO "RACDCERT ID(${clientUser}) CONNECT(ID(${clientUser}) LABEL('${clientLabel}') RING(${clientRing}) DEFAULT)"
chk $? "Unable to connect ${clientLabel} and ${clientRing}"

issueTSO "RACDCERT ID(${clientUser}) CONNECT(CERTAUTH LABEL('${caLabel}') RING(${clientRing}))"
chk $? "Unable to connect ${clientLabel} and ${clientRing}"

racfPermitUsers "FACILITY" "IRR.DIGTCERT.LISTRING" "UPDATE" "${serverUser}"
chk $? "Unable to permit ${serverUser} to update access to keyring"

racfPermitUsers "FACILITY" "IRR.DIGTCERT.GENCERT" "CONTROL" "${serverUser}"
chk $? "Unable to permit ${serverUser} to update access to keyring"

racfRefreshClasses "DIGTCERT DIGTRING FACILITY"
chk $? "Unable to refresh DIGTCERT and DIGTRING classes"

p12binfile="${browserCertDir}/${certPrefix}-bin.p12"
cabinfile="${browserCertDir}/${certPrefix}ca-bin.der"
pemcert="${browserCertDir}/${certPrefix}-crt.pem"
pemkey="${browserCertDir}/${certPrefix}-key.pem"
sslout="${browserCertDir}/${certPrefix}-ssl.out"
sslerr="${browserCertDir}/${certPrefix}-ssl.err"

issueTSO "RACDCERT ID(${clientUser}) EXPORT(LABEL('${clientLabel}')) DSN('${tmpds}') FORMAT(PKCS12DER) PASSWORD('${browserCertPW}')"
chk $? "Unable to export RACF certificate as DER encoded client certificate"

dcp -B "${tmpds}" "${p12binfile}"
chk $? "Unable to copy client certificate ${tmpds}"

issueTSO "RACDCERT EXPORT(LABEL('${caLabel}')) CERTAUTH DSN('${tmpds}') FORMAT(CERTDER)"
chk $? "Unable to export RACF certificate as CERTDER encoded certificate authority"

dcp -B "${tmpds}" "${cabinfile}"
chk $? "Unable to copy certificate authority ${tmpds}"

rm -f "${sslout}" "${sslerr}"

openssl pkcs12 -in "${p12binfile}" -out "${pemcert}" -clcerts -nokeys -passin "pass:${browserCertPW}" >${sslout} 2>${sslerr}
chk $? "Unable to create pem cert ${pemcert}. See ${sslout} and ${sslerr} for details" 

openssl pkcs12 -in "${p12binfile}" -out "${pemkey}" -nocerts -nodes -passin "pass:${browserCertPW}" >>${sslout} 2>>${sslerr}
chk $? "Unable to create pem cert ${pemkey}. See ${sslout} and ${sslerr} for details" 

rm -f "${sslout}" "${sslerr}"

drm -f "${tmpds}"

if ${verbose}; then
	certificateDetails=`tsocmd "racdcert id(${clientUser}) listchain(label('${clientLabel}'))"`
	chk $? "Unable to list certificate chain for label ${clientLabel} for owner ${clientUser}"
	echo "${certificateDetails}" >&2
	certificateDetails=`tsocmd "racdcert id(${serverUser}) listchain(label('${serverLabel}'))"`
	chk $? "Unable to list certificate chain for label ${serverLabel} for owner ${serverUser}"
	echo "${certificateDetails}" >&2
fi
