#!/bin/sh
#
# Get, Set, or Delete a z/OSMF System Variable
# See https://tech.mikefulton.ca/ZOSMFSystemVariableAPIs for details on the underlying z/OSMF APIs
#
Syntax() {
	echo "$0 [-v|-d|-?] [<var>][=<val>]" >&2
	echo "  Where <var> is the z/OSMF System Variable to get, set or delete." >&2
	echo "  If <val> is specified, <var> will be set to <val>" >&2
	echo "  If <val> is not specified, the current value of <var> will be written to stdout" >&2
	echo "  If <var> is not specified, all variables will be listed" >&2
	echo "  If -d is specified, <var> will be deleted" >&2
	echo "  If -v is specified, verbose network tracing will be written to stderr" >&2
	echo "  If -? is specified, this syntax will be printed" >&2
	echo "Example: Set the variable myappport to 2020" >&2
	echo " $0 myappport=2020" >&2
	echo "Example: Print the value of myappport" >&2
	echo " $0 myappport" >&2
	echo "Example: Delete the variable myappport" >&2
	echo " $0 -d myappport" >&2
	echo "Example: List all z/OSMF System Variables" >&2
	echo " $0" >&2
	echo "Note:" >&2
	echo "You need httpsget, httpspost, httpsdelete to run this code. You can get the latest version from: https://github.com/zospm/zospm" >&2
}

zosmfport() {
	zosmfnetstat=`tsocmd netstat 2>/dev/null | grep IZUSVR | grep ".*Listen"`
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "Unable to determine port z/OSMF (IZUSVR*) is listening on. Is z/OSMF started on this system?" >&2
		Syntax
	fi
 	zosmfqualifiedport=`echo "${zosmfnetstat}" | awk '{ print $4 }'`
	zosmfport=${zosmfqualifiedport##*.}
	echo ${zosmfport}
}

opts=""         	
verbose=false
delete=false
while getopts ":vd" opt; do
	case ${opt} in
		v )
			verbose=true
			;;
		d )
			delete=true
			;;
		\?)         
			if [ ${OPTARG} != "?" ]; then
				echo "Unknown Option: ${OPTARG}" >&2
			fi                
			Syntax
			exit 4
			;;        
	esac  	
done    	
shift $(expr $OPTIND - 1 )

if [ $# -gt 1 ]; then
  Syntax
  exit 4
fi

httpsgetversion=`httpsget -V 2>/dev/null`
rc=$?
if [ $rc -eq 127 ]; then
	echo "httpsget not found." >&2
	Syntax
	exit 16
fi
if [ $rc -gt 0 ]; then
	echo "You have an old version of httpsget. You need at least Version 1.0.1" >&2
	Syntax
	exit 8
fi

sysname=`sysvar SYSNAME`
sysplexname=`sysvar SYSPLEX`
zosmfport=`zosmfport`

arg="$1"
sysval="${arg#*=}"
if [ "${sysval}" = "$1" ]; then
	sysvar="$1"
	sysval=""
else
	sysvar="${arg%%=*}"
fi

if [ "${sysvar}" = '' ] && ${delete}; then
	echo "You have to specify a variable to delete when using -d" >&2
	Syntax
	exit 8
fi

if [ "${USERNAME}" != '' ] && [ "${PASSWORD}" != '' ]; then
	opts="-u ${USERNAME}:${PASSWORD}"
	cert='none'
else
	cert="z/OSMF Client Certificate"
	ring="ZOSMF"
	user="${USER}"
	opts="-r ${user}/${ring}"
fi
if ${verbose}; then
	file="$RANDOM.$$.https.out"
	if [ "$TMP" != '' ]; then
		verboseFile="${TMP}/${file}"
	else
		verboseFile="/tmp/${file}"	
	fi
	opts="${opts} -v ${verboseFile}"
else
	verboseFile=''
fi

pipe="$RANDOM.$$.https.pipe"
if [ "$TMP" != '' ]; then
	pipeFile="${TMP}/${pipe}"
else
	pipeFile="/tmp/${pipe}"	
fi

# Use a named pipe so if the httpsget/httpsput/httpspost/httpsdelete fails, will get a non-zero RC
rm -f ${pipeFile}; mkfifo ${pipeFile}
if [ "${sysval}" = '' ]; then
	if ${delete}; then
		request=`echo "[\"${sysvar}\"]" | iconv -f IBM-1047 -t ISO8859-1`
		iconv -f ISO8859-1 -t IBM-1047 < ${pipeFile} &
		echo ${request} | httpsdelete ${opts} "-l" "${cert}" "https://127.0.0.1:${zosmfport}/zosmf/variables/rest/1.0/systems/${sysplexname}.${sysname}" > ${pipeFile}
	else
		iconv -f ISO8859-1 -t IBM-1047 < ${pipeFile} | readsysvar "${sysvar}" &
		httpsget ${opts} "-l" "${cert}" "https://127.0.0.1:${zosmfport}/zosmf/variables/rest/1.0/systems/${sysplexname}.${sysname}" > ${pipeFile}
	fi
	rc=$?
else
	request=`echo "{\"system-variable-list\":[{\"name\":\"${sysvar}\",\"value\":\"${sysval}\",\"description\":\"\"}]}'" | iconv -f IBM-1047 -t ISO8859-1`
	iconv -f ISO8859-1 -t IBM-1047 < ${pipeFile} &
	echo ${request} | httpspost ${opts} "-l" "${cert}" "https://127.0.0.1:${zosmfport}/zosmf/variables/rest/1.0/systems/${sysplexname}.${sysname}" > ${pipeFile}
	rc=$?
fi
if ${verbose}; then
	cat "${verboseFile}" >&2
	rm -f "${verboseFile}"
fi
rm -f "${pipeFile}"
exit $rc
